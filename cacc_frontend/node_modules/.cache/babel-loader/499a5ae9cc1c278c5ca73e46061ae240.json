{"ast":null,"code":"import { Vector, calculateBounds, getDistances, getRandom, isPointInside, randomInRange } from \"tsparticles-engine\";\nexport class OutOutMode {\n  constructor(container) {\n    this.container = container;\n    this.modes = [\"out\"];\n  }\n\n  update(particle, direction, delta, outMode) {\n    if (!this.modes.includes(outMode)) {\n      return;\n    }\n\n    const container = this.container;\n\n    switch (particle.outType) {\n      case \"inside\":\n        {\n          const {\n            x: vx,\n            y: vy\n          } = particle.velocity;\n          const circVec = Vector.origin;\n          circVec.length = particle.moveCenter.radius;\n          circVec.angle = particle.velocity.angle + Math.PI;\n          circVec.addTo(Vector.create(particle.moveCenter));\n          const {\n            dx,\n            dy\n          } = getDistances(particle.position, circVec);\n\n          if (vx <= 0 && dx >= 0 || vy <= 0 && dy >= 0 || vx >= 0 && dx <= 0 || vy >= 0 && dy <= 0) {\n            return;\n          }\n\n          particle.position.x = Math.floor(randomInRange({\n            min: 0,\n            max: container.canvas.size.width\n          }));\n          particle.position.y = Math.floor(randomInRange({\n            min: 0,\n            max: container.canvas.size.height\n          }));\n          const {\n            dx: newDx,\n            dy: newDy\n          } = getDistances(particle.position, particle.moveCenter);\n          particle.direction = Math.atan2(-newDy, -newDx);\n          particle.velocity.angle = particle.direction;\n          break;\n        }\n\n      default:\n        {\n          if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n            return;\n          }\n\n          switch (particle.outType) {\n            case \"outside\":\n              {\n                particle.position.x = Math.floor(randomInRange({\n                  min: -particle.moveCenter.radius,\n                  max: particle.moveCenter.radius\n                })) + particle.moveCenter.x;\n                particle.position.y = Math.floor(randomInRange({\n                  min: -particle.moveCenter.radius,\n                  max: particle.moveCenter.radius\n                })) + particle.moveCenter.y;\n                const {\n                  dx,\n                  dy\n                } = getDistances(particle.position, particle.moveCenter);\n\n                if (particle.moveCenter.radius) {\n                  particle.direction = Math.atan2(dy, dx);\n                  particle.velocity.angle = particle.direction;\n                }\n\n                break;\n              }\n\n            case \"normal\":\n              {\n                const wrap = particle.options.move.warp,\n                      canvasSize = container.canvas.size,\n                      newPos = {\n                  bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n                  left: -particle.getRadius() - particle.offset.x,\n                  right: canvasSize.width + particle.getRadius() + particle.offset.x,\n                  top: -particle.getRadius() - particle.offset.y\n                },\n                      sizeValue = particle.getRadius(),\n                      nextBounds = calculateBounds(particle.position, sizeValue);\n\n                if (direction === \"right\" && nextBounds.left > canvasSize.width + particle.offset.x) {\n                  particle.position.x = newPos.left;\n                  particle.initialPosition.x = particle.position.x;\n\n                  if (!wrap) {\n                    particle.position.y = getRandom() * canvasSize.height;\n                    particle.initialPosition.y = particle.position.y;\n                  }\n                } else if (direction === \"left\" && nextBounds.right < -particle.offset.x) {\n                  particle.position.x = newPos.right;\n                  particle.initialPosition.x = particle.position.x;\n\n                  if (!wrap) {\n                    particle.position.y = getRandom() * canvasSize.height;\n                    particle.initialPosition.y = particle.position.y;\n                  }\n                }\n\n                if (direction === \"bottom\" && nextBounds.top > canvasSize.height + particle.offset.y) {\n                  if (!wrap) {\n                    particle.position.x = getRandom() * canvasSize.width;\n                    particle.initialPosition.x = particle.position.x;\n                  }\n\n                  particle.position.y = newPos.top;\n                  particle.initialPosition.y = particle.position.y;\n                } else if (direction === \"top\" && nextBounds.bottom < -particle.offset.y) {\n                  if (!wrap) {\n                    particle.position.x = getRandom() * canvasSize.width;\n                    particle.initialPosition.x = particle.position.x;\n                  }\n\n                  particle.position.y = newPos.bottom;\n                  particle.initialPosition.y = particle.position.y;\n                }\n\n                break;\n              }\n          }\n\n          break;\n        }\n    }\n  }\n\n}","map":{"version":3,"names":["Vector","calculateBounds","getDistances","getRandom","isPointInside","randomInRange","OutOutMode","constructor","container","modes","update","particle","direction","delta","outMode","includes","outType","x","vx","y","vy","velocity","circVec","origin","length","moveCenter","radius","angle","Math","PI","addTo","create","dx","dy","position","floor","min","max","canvas","size","width","height","newDx","newDy","atan2","getRadius","wrap","options","move","warp","canvasSize","newPos","bottom","offset","left","right","top","sizeValue","nextBounds","initialPosition"],"sources":["C:/website/cacc/cacc_frontend/node_modules/tsparticles-updater-out-modes/esm/OutOutMode.js"],"sourcesContent":["import { Vector, calculateBounds, getDistances, getRandom, isPointInside, randomInRange, } from \"tsparticles-engine\";\r\nexport class OutOutMode {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.modes = [\"out\"];\r\n    }\r\n    update(particle, direction, delta, outMode) {\r\n        if (!this.modes.includes(outMode)) {\r\n            return;\r\n        }\r\n        const container = this.container;\r\n        switch (particle.outType) {\r\n            case \"inside\": {\r\n                const { x: vx, y: vy } = particle.velocity;\r\n                const circVec = Vector.origin;\r\n                circVec.length = particle.moveCenter.radius;\r\n                circVec.angle = particle.velocity.angle + Math.PI;\r\n                circVec.addTo(Vector.create(particle.moveCenter));\r\n                const { dx, dy } = getDistances(particle.position, circVec);\r\n                if ((vx <= 0 && dx >= 0) || (vy <= 0 && dy >= 0) || (vx >= 0 && dx <= 0) || (vy >= 0 && dy <= 0)) {\r\n                    return;\r\n                }\r\n                particle.position.x = Math.floor(randomInRange({\r\n                    min: 0,\r\n                    max: container.canvas.size.width,\r\n                }));\r\n                particle.position.y = Math.floor(randomInRange({\r\n                    min: 0,\r\n                    max: container.canvas.size.height,\r\n                }));\r\n                const { dx: newDx, dy: newDy } = getDistances(particle.position, particle.moveCenter);\r\n                particle.direction = Math.atan2(-newDy, -newDx);\r\n                particle.velocity.angle = particle.direction;\r\n                break;\r\n            }\r\n            default: {\r\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\r\n                    return;\r\n                }\r\n                switch (particle.outType) {\r\n                    case \"outside\": {\r\n                        particle.position.x =\r\n                            Math.floor(randomInRange({\r\n                                min: -particle.moveCenter.radius,\r\n                                max: particle.moveCenter.radius,\r\n                            })) + particle.moveCenter.x;\r\n                        particle.position.y =\r\n                            Math.floor(randomInRange({\r\n                                min: -particle.moveCenter.radius,\r\n                                max: particle.moveCenter.radius,\r\n                            })) + particle.moveCenter.y;\r\n                        const { dx, dy } = getDistances(particle.position, particle.moveCenter);\r\n                        if (particle.moveCenter.radius) {\r\n                            particle.direction = Math.atan2(dy, dx);\r\n                            particle.velocity.angle = particle.direction;\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"normal\": {\r\n                        const wrap = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {\r\n                            bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\r\n                            left: -particle.getRadius() - particle.offset.x,\r\n                            right: canvasSize.width + particle.getRadius() + particle.offset.x,\r\n                            top: -particle.getRadius() - particle.offset.y,\r\n                        }, sizeValue = particle.getRadius(), nextBounds = calculateBounds(particle.position, sizeValue);\r\n                        if (direction === \"right\" &&\r\n                            nextBounds.left > canvasSize.width + particle.offset.x) {\r\n                            particle.position.x = newPos.left;\r\n                            particle.initialPosition.x = particle.position.x;\r\n                            if (!wrap) {\r\n                                particle.position.y = getRandom() * canvasSize.height;\r\n                                particle.initialPosition.y = particle.position.y;\r\n                            }\r\n                        }\r\n                        else if (direction === \"left\" && nextBounds.right < -particle.offset.x) {\r\n                            particle.position.x = newPos.right;\r\n                            particle.initialPosition.x = particle.position.x;\r\n                            if (!wrap) {\r\n                                particle.position.y = getRandom() * canvasSize.height;\r\n                                particle.initialPosition.y = particle.position.y;\r\n                            }\r\n                        }\r\n                        if (direction === \"bottom\" &&\r\n                            nextBounds.top > canvasSize.height + particle.offset.y) {\r\n                            if (!wrap) {\r\n                                particle.position.x = getRandom() * canvasSize.width;\r\n                                particle.initialPosition.x = particle.position.x;\r\n                            }\r\n                            particle.position.y = newPos.top;\r\n                            particle.initialPosition.y = particle.position.y;\r\n                        }\r\n                        else if (direction === \"top\" && nextBounds.bottom < -particle.offset.y) {\r\n                            if (!wrap) {\r\n                                particle.position.x = getRandom() * canvasSize.width;\r\n                                particle.initialPosition.x = particle.position.x;\r\n                            }\r\n                            particle.position.y = newPos.bottom;\r\n                            particle.initialPosition.y = particle.position.y;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}